package Spellbook::Exploit::Reflected_XSS {
    use strict;
    use warnings;
    use Mojo::UserAgent;
    use Mojo::Parameters;
    use UUID::Tiny ':std';
    use Try::Tiny;

    our $VERSION = '0.0.1';

    sub new {
        my ($self, $parameters) = @_;
        my ($help, $target, @result);

        Getopt::Long::GetOptionsFromArray (
            $parameters,
            'h|help'     => \$help,
            't|target=s' => \$target
        );

        if ($target) {
            my $useragent  = Mojo::UserAgent -> new();
            my $parsed_url = Mojo::URL -> new($target);
            my $query      = $parsed_url -> query();

            if ($query) {
                my $params = Mojo::Parameters -> new($query);

                foreach my $name (@{$params -> names}) {
                    my $uuid    = create_uuid_as_string(4);
                    my $payload = $uuid; # i need change this payload to contain a javascript or html tag
                    my $value   = $params -> param($name);

                    $params -> remove($name);
                    $params -> append($name, $payload);
                    
                    $parsed_url -> query($params);

                    try {
                        my $response = $useragent -> get($parsed_url) -> result();

                        if ($response -> is_success()) {
                            my $content = $response -> body();

                            if ($content =~ /$payload/gx) {
                                push @result, $parsed_url;
                            }
                        }
                    }
                }
            }
            
            return @result;
        }

        if ($help) {
            return "
                \rExploit::Reflected_XSS
                \r=====================
                \r-h, --help     See this menu
                \r-t, --target   Set an website to see paths from WayBackMachine\n";
        }

        return 0;
    }
}

1;